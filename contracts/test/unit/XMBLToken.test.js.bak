const { expect } = require("chai");
const { ethers } = require("hardhat");
const { loadFixture } = require("@nomicfoundation/hardhat-network-helpers");

describe("XMBLToken", function () {
  // Test fixtures for consistent test setup
  async function deployXMBLTokenFixture() {
    const [owner, minter, user1, user2, user3] = await ethers.getSigners();
    
    // Deploy ERC-6551 Registry
    const ERC6551Registry = await ethers.getContractFactory("ERC6551Registry");
    const registry = await ERC6551Registry.deploy();
    await registry.waitForDeployment();
    
    // Deploy Token Bound Account implementation
    const TBAImplementation = await ethers.getContractFactory("TBAImplementation");
    const tbaImplementation = await TBAImplementation.deploy();
    await tbaImplementation.waitForDeployment();
    
    // Deploy XMBLToken
    const XMBLToken = await ethers.getContractFactory("XMBLToken");
    const xmblToken = await XMBLToken.deploy(
      "XMBL Liquid Token", 
      "XMBL",
      await registry.getAddress(),
      await tbaImplementation.getAddress()
    );
    await xmblToken.waitForDeployment();
    
    // Grant minter role
    const MINTER_ROLE = await xmblToken.MINTER_ROLE();
    await xmblToken.grantRole(MINTER_ROLE, await minter.getAddress());
    
    return {
      xmblToken,
      registry,
      tbaImplementation,
      owner,
      minter,
      user1,
      user2,
      user3,
      MINTER_ROLE
    };
  }

  describe("Deployment and Initialization", function () {
    it("Should deploy with correct name, symbol, and ERC-6551 configuration", async function () {
      const { xmblToken, registry, tbaImplementation } = await loadFixture(deployXMBLTokenFixture);
      
      expect(await xmblToken.name()).to.equal("XMBL Liquid Token");
      expect(await xmblToken.symbol()).to.equal("XMBL");
      expect(await xmblToken.erc6551Registry()).to.equal(await registry.getAddress());
      expect(await xmblToken.tbaImplementation()).to.equal(await tbaImplementation.getAddress());
    });

    it("Should set deployer as default admin", async function () {
      const { xmblToken, owner } = await loadFixture(deployXMBLTokenFixture);
      
      const DEFAULT_ADMIN_ROLE = await xmblToken.DEFAULT_ADMIN_ROLE();
      expect(await xmblToken.hasRole(DEFAULT_ADMIN_ROLE, await owner.getAddress())).to.be.true;
    });

    it("Should initialize with zero total supply", async function () {
      const { xmblToken } = await loadFixture(deployXMBLTokenFixture);
      
      expect(await xmblToken.totalSupply()).to.equal(0);
      expect(await xmblToken.nextTokenId()).to.equal(1);
    });

    it("Should support required interfaces", async function () {
      const { xmblToken } = await loadFixture(deployXMBLTokenFixture);
      
      // ERC-721
      expect(await xmblToken.supportsInterface("0x80ac58cd")).to.be.true;
      // ERC-721 Metadata
      expect(await xmblToken.supportsInterface("0x5b5e139f")).to.be.true;
      // AccessControl
      expect(await xmblToken.supportsInterface("0x7965db0b")).to.be.true;
    });
  });

  describe("NFT Minting with Token Bound Accounts", function () {
    it("Should mint NFT with automatic TBA creation", async function () {
      const { xmblToken, registry, minter, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      const depositValue = ethers.utils.parseEther("1.0");
      const tokenAddress = ethers.constants.AddressZero; // ETH
      
      const tx = await xmblToken.connect(minter).mintWithTBA(
        user1await .address.getAddress(),
        depositValue,
        tokenAddress
      );
      
      await expect(tx)
        .to.emit(xmblToken, "Transfer")
        .withArgs(ethers.constants.AddressZero, user1await .address.getAddress(), 1);
      
      await expect(tx)
        .to.emit(xmblToken, "TokenBoundAccountCreated")
        .withArgs(1, await xmblToken.getTokenBoundAccount(1), user1await .address.getAddress());
      
      // Verify NFT ownership
      expect(await xmblToken.ownerOf(1)).to.equal(user1await .address.getAddress());
      expect(await xmblToken.balanceOf(user1await .address.getAddress())).to.equal(1);
      
      // Verify TBA was created
      const tbaAddress = await xmblToken.getTokenBoundAccount(1);
      expect(tbaAddress).to.not.equal(ethers.constants.AddressZero);
      
      // Verify NFT metadata
      const nftData = await xmblToken.getNFTData(1);
      expect(nftData.depositValue).to.equal(depositValue);
      expect(nftData.tokenAddress).to.equal(tokenAddress);
      expect(nftData.tbaAddress).to.equal(tbaAddress);
      expect(nftData.owner).to.equal(user1await .address.getAddress());
    });

    it("Should create unique TBAs for each NFT", async function () {
      const { xmblToken, minter, user1, user2 } = await loadFixture(deployXMBLTokenFixture);
      
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      await xmblToken.connect(minter).mintWithTBA(user2await .address.getAddress(), ethers.utils.parseEther("2.0"), ethers.constants.AddressZero);
      
      const tba1 = await xmblToken.getTokenBoundAccount(1);
      const tba2 = await xmblToken.getTokenBoundAccount(2);
      
      expect(tba1).to.not.equal(tba2);
      expect(tba1).to.not.equal(ethers.constants.AddressZero);
      expect(tba2).to.not.equal(ethers.constants.AddressZero);
    });

    it("Should only allow minters to mint NFTs", async function () {
      const { xmblToken, user1, user2 } = await loadFixture(deployXMBLTokenFixture);
      
      await expect(
        xmblToken.connect(user1).mintWithTBA(user2await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero)
      ).to.be.revertedWith("AccessControl: account " + user1await .address.getAddress().toLowerCase() + " is missing role");
    });

    it("Should increment token IDs correctly", async function () {
      const { xmblToken, minter, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("2.0"), ethers.constants.AddressZero);
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("3.0"), ethers.constants.AddressZero);
      
      expect(await xmblToken.ownerOf(1)).to.equal(user1await .address.getAddress());
      expect(await xmblToken.ownerOf(2)).to.equal(user1await .address.getAddress());
      expect(await xmblToken.ownerOf(3)).to.equal(user1await .address.getAddress());
      expect(await xmblToken.nextTokenId()).to.equal(4);
      expect(await xmblToken.totalSupply()).to.equal(3);
    });

    it("Should validate minting parameters", async function () {
      const { xmblToken, minter, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      // Zero address recipient
      await expect(
        xmblToken.connect(minter).mintWithTBA(ethers.constants.AddressZero, ethers.utils.parseEther("1.0"), ethers.constants.AddressZero)
      ).to.be.revertedWith("Cannot mint to zero address");
      
      // Zero deposit value
      await expect(
        xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), 0, ethers.constants.AddressZero)
      ).to.be.revertedWith("Deposit value must be greater than zero");
    });
  });

  describe("Token Bound Account Operations", function () {
    it("Should calculate correct TBA address using ERC-6551 standard", async function () {
      const { xmblToken, registry, tbaImplementation, minter, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      
      const tokenId = 1;
      const chainId = await ethers.provider.getNetwork().then(n => n.chainId);
      
      // Calculate expected TBA address
      const salt = ethers.BigNumber.from(tokenId);
      const expectedTBA = await registry.account(tbaImplementationawait .address.getAddress(), salt, chainId, xmblTokenawait .address.getAddress(), tokenId);
      
      const actualTBA = await xmblToken.getTokenBoundAccount(tokenId);
      
      expect(actualTBA).to.equal(expectedTBA);
    });

    it("Should verify TBA ownership correctly", async function () {
      const { xmblToken, minter, user1, user2 } = await loadFixture(deployXMBLTokenFixture);
      
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      
      expect(await xmblToken.isValidTBAOwner(1, user1await .address.getAddress())).to.be.true;
      expect(await xmblToken.isValidTBAOwner(1, user2await .address.getAddress())).to.be.false;
    });

    it("Should handle TBA operations after NFT transfer", async function () {
      const { xmblToken, minter, user1, user2 } = await loadFixture(deployXMBLTokenFixture);
      
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      
      const tbaAddress = await xmblToken.getTokenBoundAccount(1);
      
      // Transfer NFT
      await xmblToken.connect(user1).transferFrom(user1await .address.getAddress(), user2await .address.getAddress(), 1);
      
      // TBA address should remain the same
      expect(await xmblToken.getTokenBoundAccount(1)).to.equal(tbaAddress);
      
      // But ownership should transfer
      expect(await xmblToken.isValidTBAOwner(1, user1await .address.getAddress())).to.be.false;
      expect(await xmblToken.isValidTBAOwner(1, user2await .address.getAddress())).to.be.true;
    });

    it("Should allow TBA execution only by NFT owner", async function () {
      const { xmblToken, minter, user1, user2 } = await loadFixture(deployXMBLTokenFixture);
      
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      
      const callData = "0x"; // Empty call data for testing
      
      await expect(
        xmblToken.connect(user1).executeTBACall(1, user2await .address.getAddress(), 0, callData)
      ).to.not.be.reverted;
      
      await expect(
        xmblToken.connect(user2).executeTBACall(1, user2await .address.getAddress(), 0, callData)
      ).to.be.revertedWith("Not NFT owner");
    });

    it("Should prevent TBA operations on non-existent tokens", async function () {
      const { xmblToken, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      await expect(
        xmblToken.getTokenBoundAccount(999)
      ).to.be.revertedWith("Token does not exist");
      
      await expect(
        xmblToken.connect(user1).executeTBACall(999, user1await .address.getAddress(), 0, "0x")
      ).to.be.revertedWith("Token does not exist");
    });
  });

  describe("NFT Metadata and Data", function () {
    it("Should store and retrieve complete NFT data", async function () {
      const { xmblToken, minter, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      const depositValue = ethers.utils.parseEther("1.5");
      const tokenAddress = "0xA0b86a33E6417aAb8C23EA0b2e0a8f90EA41a98e"; // USDC
      
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), depositValue, tokenAddress);
      
      const nftData = await xmblToken.getNFTData(1);
      
      expect(nftData.depositValue).to.equal(depositValue);
      expect(nftData.tokenAddress).to.equal(tokenAddress);
      expect(nftData.owner).to.equal(user1await .address.getAddress());
      expect(nftData.tbaAddress).to.not.equal(ethers.constants.AddressZero);
      expect(nftData.createdAt).to.be.gt(0);
    });

    it("Should generate proper token URI with metadata", async function () {
      const { xmblToken, minter, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      
      const tokenURI = await xmblToken.tokenURI(1);
      
      expect(tokenURI).to.include("data:application/json;base64,");
      
      // Decode and verify metadata
      const base64Data = tokenURI.split(",")[1];
      const metadata = JSON.parse(Buffer.from(base64Data, 'base64').toString());
      
      expect(metadata.name).to.include("XMBL Liquid Token #1");
      expect(metadata.description).to.include("XMBL protocol");
      expect(metadata.attributes).to.be.an('array');
      
      // Check for required attributes
      const attributes = metadata.attributes;
      const depositValueAttr = attributes.find(attr => attr.trait_type === "Deposit Value");
      const tokenAddressAttr = attributes.find(attr => attr.trait_type === "Token Address");
      const tbaAddressAttr = attributes.find(attr => attr.trait_type === "TBA Address");
      
      expect(depositValueAttr).to.exist;
      expect(tokenAddressAttr).to.exist;
      expect(tbaAddressAttr).to.exist;
    });

    it("Should update metadata after TBA receives assets", async function () {
      const { xmblToken, minter, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      
      const tbaAddress = await xmblToken.getTokenBoundAccount(1);
      
      // Send ETH to TBA
      await user1.sendTransaction({
        to: tbaAddress,
        value: ethers.utils.parseEther("0.5")
      });
      
      // Update TBA balance in metadata
      await xmblToken.updateTBABalance(1);
      
      const tokenURI = await xmblToken.tokenURI(1);
      const base64Data = tokenURI.split(",")[1];
      const metadata = JSON.parse(Buffer.from(base64Data, 'base64').toString());
      
      const tbaBalanceAttr = metadata.attributes.find(attr => attr.trait_type === "TBA Balance");
      expect(tbaBalanceAttr.value).to.include("0.5");
    });

    it("Should handle token URI for non-existent tokens", async function () {
      const { xmblToken } = await loadFixture(deployXMBLTokenFixture);
      
      await expect(
        xmblToken.tokenURI(999)
      ).to.be.revertedWith("Token does not exist");
    });

    it("Should allow metadata updates by authorized accounts", async function () {
      const { xmblToken, owner, minter, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      
      const newDescription = "Updated XMBL NFT with enhanced features";
      
      await xmblToken.connect(owner).updateBaseMetadata("XMBL Enhanced", newDescription);
      
      const tokenURI = await xmblToken.tokenURI(1);
      const base64Data = tokenURI.split(",")[1];
      const metadata = JSON.parse(Buffer.from(base64Data, 'base64').toString());
      
      expect(metadata.description).to.equal(newDescription);
    });
  });

  describe("Enumeration and Batch Operations", function () {
    it("Should track user's NFT collection", async function () {
      const { xmblToken, minter, user1, user2 } = await loadFixture(deployXMBLTokenFixture);
      
      // Mint multiple NFTs to user1
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("2.0"), ethers.constants.AddressZero);
      await xmblToken.connect(minter).mintWithTBA(user2await .address.getAddress(), ethers.utils.parseEther("3.0"), ethers.constants.AddressZero);
      
      const user1Tokens = await xmblToken.getUserTokens(user1await .address.getAddress());
      const user2Tokens = await xmblToken.getUserTokens(user2await .address.getAddress());
      
      expect(user1Tokens).to.deep.equal([ethers.BigNumber.from(1), ethers.BigNumber.from(2)]);
      expect(user2Tokens).to.deep.equal([ethers.BigNumber.from(3)]);
    });

    it("Should get batch NFT data efficiently", async function () {
      const { xmblToken, minter, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("2.0"), ethers.constants.AddressZero);
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("3.0"), ethers.constants.AddressZero);
      
      const batchData = await xmblToken.getBatchNFTData([1, 2, 3]);
      
      expect(batchData).to.have.lengthOf(3);
      expect(batchData[0].depositValue).to.equal(ethers.utils.parseEther("1.0"));
      expect(batchData[1].depositValue).to.equal(ethers.utils.parseEther("2.0"));
      expect(batchData[2].depositValue).to.equal(ethers.utils.parseEther("3.0"));
    });

    it("Should get user's complete portfolio data", async function () {
      const { xmblToken, minter, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("2.0"), ethers.constants.AddressZero);
      
      const portfolio = await xmblToken.getUserPortfolio(user1await .address.getAddress());
      
      expect(portfolio.tokenIds).to.have.lengthOf(2);
      expect(portfolio.nftData).to.have.lengthOf(2);
      expect(portfolio.totalDepositValue).to.equal(ethers.utils.parseEther("3.0"));
    });

    it("Should handle empty portfolios", async function () {
      const { xmblToken, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      const portfolio = await xmblToken.getUserPortfolio(user1await .address.getAddress());
      
      expect(portfolio.tokenIds).to.have.lengthOf(0);
      expect(portfolio.nftData).to.have.lengthOf(0);
      expect(portfolio.totalDepositValue).to.equal(0);
    });
  });

  describe("Burning and Withdrawal", function () {
    it("Should allow NFT burning by authorized accounts", async function () {
      const { xmblToken, minter, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      
      const tx = await xmblToken.connect(minter).burn(1);
      
      await expect(tx)
        .to.emit(xmblToken, "Transfer")
        .withArgs(user1await .address.getAddress(), ethers.constants.AddressZero, 1);
      
      await expect(
        xmblToken.ownerOf(1)
      ).to.be.revertedWith("ERC721: invalid token ID");
      
      expect(await xmblToken.totalSupply()).to.equal(0);
    });

    it("Should clean up data when burning NFT", async function () {
      const { xmblToken, minter, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      
      await xmblToken.connect(minter).burn(1);
      
      // Data should be cleared
      await expect(
        xmblToken.getNFTData(1)
      ).to.be.revertedWith("Token does not exist");
      
      await expect(
        xmblToken.getTokenBoundAccount(1)
      ).to.be.revertedWith("Token does not exist");
    });

    it("Should only allow authorized burning", async function () {
      const { xmblToken, minter, user1, user2 } = await loadFixture(deployXMBLTokenFixture);
      
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      
      await expect(
        xmblToken.connect(user1).burn(1)
      ).to.be.revertedWith("AccessControl: account " + user1await .address.getAddress().toLowerCase() + " is missing role");
      
      await expect(
        xmblToken.connect(user2).burn(1)
      ).to.be.revertedWith("AccessControl: account " + user2await .address.getAddress().toLowerCase() + " is missing role");
    });

    it("Should handle burning non-existent tokens", async function () {
      const { xmblToken, minter } = await loadFixture(deployXMBLTokenFixture);
      
      await expect(
        xmblToken.connect(minter).burn(999)
      ).to.be.revertedWith("ERC721: invalid token ID");
    });
  });

  describe("Access Control", function () {
    it("Should manage minter roles correctly", async function () {
      const { xmblToken, owner, user1, MINTER_ROLE } = await loadFixture(deployXMBLTokenFixture);
      
      expect(await xmblToken.hasRole(MINTER_ROLE, user1await .address.getAddress())).to.be.false;
      
      await xmblToken.connect(owner).grantRole(MINTER_ROLE, user1await .address.getAddress());
      
      expect(await xmblToken.hasRole(MINTER_ROLE, user1await .address.getAddress())).to.be.true;
      
      // user1 should now be able to mint
      await xmblToken.connect(user1).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      
      expect(await xmblToken.ownerOf(1)).to.equal(user1await .address.getAddress());
    });

    it("Should revoke minter roles", async function () {
      const { xmblToken, owner, minter, user1, MINTER_ROLE } = await loadFixture(deployXMBLTokenFixture);
      
      await xmblToken.connect(owner).revokeRole(MINTER_ROLE, minterawait .address.getAddress());
      
      expect(await xmblToken.hasRole(MINTER_ROLE, minterawait .address.getAddress())).to.be.false;
      
      await expect(
        xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero)
      ).to.be.revertedWith("AccessControl: account " + minterawait .address.getAddress().toLowerCase() + " is missing role");
    });

    it("Should prevent unauthorized role management", async function () {
      const { xmblToken, user1, user2, MINTER_ROLE } = await loadFixture(deployXMBLTokenFixture);
      
      await expect(
        xmblToken.connect(user1).grantRole(MINTER_ROLE, user2await .address.getAddress())
      ).to.be.revertedWith("AccessControl: account " + user1await .address.getAddress().toLowerCase() + " is missing role");
    });
  });

  describe("Gas Optimization", function () {
    it("Should mint multiple NFTs efficiently", async function () {
      const { xmblToken, minter, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      const depositValues = [
        ethers.utils.parseEther("1.0"),
        ethers.utils.parseEther("2.0"),
        ethers.utils.parseEther("3.0"),
        ethers.utils.parseEther("4.0"),
        ethers.utils.parseEther("5.0")
      ];
      
      const recipients = [user1await .address.getAddress(), user1await .address.getAddress(), user1await .address.getAddress(), user1await .address.getAddress(), user1await .address.getAddress()];
      const tokenAddresses = [
        ethers.constants.AddressZero,
        ethers.constants.AddressZero,
        ethers.constants.AddressZero,
        ethers.constants.AddressZero,
        ethers.constants.AddressZero
      ];
      
      await xmblToken.connect(minter).batchMintWithTBA(recipients, depositValues, tokenAddresses);
      
      expect(await xmblToken.balanceOf(user1await .address.getAddress())).to.equal(5);
      expect(await xmblToken.totalSupply()).to.equal(5);
      
      // Verify all NFTs have TBAs
      for (let i = 1; i <= 5; i++) {
        const tbaAddress = await xmblToken.getTokenBoundAccount(i);
        expect(tbaAddress).to.not.equal(ethers.constants.AddressZero);
      }
    });

    it("Should handle large batch operations efficiently", async function () {
      const { xmblToken, minter, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      const batchSize = 20;
      const recipients = new Array(batchSize).fill(user1await .address.getAddress());
      const depositValues = new Array(batchSize).fill(ethers.utils.parseEther("1.0"));
      const tokenAddresses = new Array(batchSize).fill(ethers.constants.AddressZero);
      
      await xmblToken.connect(minter).batchMintWithTBA(recipients, depositValues, tokenAddresses);
      
      expect(await xmblToken.balanceOf(user1await .address.getAddress())).to.equal(batchSize);
      expect(await xmblToken.totalSupply()).to.equal(batchSize);
    });

    it("Should validate batch parameters", async function () {
      const { xmblToken, minter, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      // Mismatched array lengths
      await expect(
        xmblToken.connect(minter).batchMintWithTBA(
          [user1await .address.getAddress()],
          [ethers.utils.parseEther("1.0"), ethers.utils.parseEther("2.0")],
          [ethers.constants.AddressZero]
        )
      ).to.be.revertedWith("Array length mismatch");
      
      // Empty arrays
      await expect(
        xmblToken.connect(minter).batchMintWithTBA([], [], [])
      ).to.be.revertedWith("Empty batch");
    });
  });

  describe("Integration with DeFi Protocols", function () {
    it("Should allow TBA to interact with external contracts", async function () {
      const { xmblToken, minter, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      // Deploy a simple mock DeFi contract
      const MockDeFi = await ethers.getContractFactory("MockDeFiProtocol");
      const mockDefi = await MockDeFi.deploy();
      
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      
      const tbaAddress = await xmblToken.getTokenBoundAccount(1);
      
      // Send ETH to TBA for DeFi interaction
      await user1.sendTransaction({
        to: tbaAddress,
        value: ethers.utils.parseEther("0.5")
      });
      
      // Execute DeFi interaction through TBA
      const stakeData = mockDefi.interface.encodeFunctionData("stake", []);
      
      await xmblToken.connect(user1).executeTBACall(1, mockDefiawait .address.getAddress(), ethers.utils.parseEther("0.1"), stakeData);
      
      // Verify interaction was successful
      expect(await mockDefi.stakedAmount(tbaAddress)).to.equal(ethers.utils.parseEther("0.1"));
    });

    it("Should track TBA DeFi positions in metadata", async function () {
      const { xmblToken, minter, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      
      // Simulate DeFi position tracking
      await xmblToken.addTBAPosition(1, "Compound", "cETH", ethers.utils.parseEther("0.5"));
      
      const positions = await xmblToken.getTBAPositions(1);
      
      expect(positions).to.have.lengthOf(1);
      expect(positions[0].protocol).to.equal("Compound");
      expect(positions[0].asset).to.equal("cETH");
      expect(positions[0].amount).to.equal(ethers.utils.parseEther("0.5"));
    });

    it("Should allow automated yield compounding through TBA", async function () {
      const { xmblToken, minter, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      
      const tbaAddress = await xmblToken.getTokenBoundAccount(1);
      
      // Send yield to TBA
      await user1.sendTransaction({
        to: tbaAddress,
        value: ethers.utils.parseEther("0.1")
      });
      
      // Enable auto-compound
      await xmblToken.connect(user1).setAutoCompound(1, true);
      
      expect(await xmblToken.isAutoCompoundEnabled(1)).to.be.true;
    });
  });

  describe("Security and Edge Cases", function () {
    it("Should prevent TBA address collision", async function () {
      const { xmblToken, minter, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      await xmblToken.connect(minter).burn(1);
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      
      // Token ID 2 should be minted (not reusing ID 1)
      expect(await xmblToken.ownerOf(2)).to.equal(user1await .address.getAddress());
      
      const tba1 = await xmblToken.getTokenBoundAccount(2);
      expect(tba1).to.not.equal(ethers.constants.AddressZero);
    });

    it("Should handle contract upgrades gracefully", async function () {
      const { xmblToken, owner, registry, minter, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      
      // Deploy new TBA implementation
      const NewTBAImplementation = await ethers.getContractFactory("TBAImplementationV2");
      const newTbaImplementation = await NewTBAImplementation.deploy();
      
      // Update TBA implementation
      await xmblToken.connect(owner).updateTBAImplementation(newTbaImplementationawait .address.getAddress());
      
      expect(await xmblToken.tbaImplementation()).to.equal(newTbaImplementationawait .address.getAddress());
      
      // New NFTs should use new implementation
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("2.0"), ethers.constants.AddressZero);
      
      const tba2 = await xmblToken.getTokenBoundAccount(2);
      expect(tba2).to.not.equal(ethers.constants.AddressZero);
    });

    it("Should validate all contract interactions", async function () {
      const { xmblToken, minter, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), ethers.utils.parseEther("1.0"), ethers.constants.AddressZero);
      
      // Invalid contract call
      await expect(
        xmblToken.connect(user1).executeTBACall(1, ethers.constants.AddressZero, 0, "0x")
      ).to.be.revertedWith("Invalid target address");
      
      // Call with insufficient TBA balance
      await expect(
        xmblToken.connect(user1).executeTBACall(1, user1await .address.getAddress(), ethers.utils.parseEther("10.0"), "0x")
      ).to.be.revertedWith("Insufficient TBA balance");
    });

    it("Should handle extreme values correctly", async function () {
      const { xmblToken, minter, user1 } = await loadFixture(deployXMBLTokenFixture);
      
      // Maximum uint256 deposit value
      const maxValue = ethers.constants.MaxUint256;
      
      await xmblToken.connect(minter).mintWithTBA(user1await .address.getAddress(), maxValue, ethers.constants.AddressZero);
      
      const nftData = await xmblToken.getNFTData(1);
      expect(nftData.depositValue).to.equal(maxValue);
    });
  });
});
